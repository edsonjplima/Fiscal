program GBNFe;

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Classes,
  Vcl.Forms,
  Data.DB,
  Vcl.Themes,
  Vcl.Styles,
  Winapi.ShellAPi,
  Vcl.Controls,
  GBNFe_U in 'GBNFe_U.pas' {FrGBNFe},
  FrPar_U in 'FrPar_U.pas' {FrPar},
  FrInut_U in 'FrInut_U.pas' {FrInut},
  ufrmStatus in 'ufrmStatus.pas' {frmStatus},
  FrSeleciona_U in 'FrSeleciona_U.pas' {FrSeleciona},
  FrCCe_U in 'FrCCe_U.pas' {FrCCe},
  FrBuscaNota_U in 'FrBuscaNota_U.pas' {FrBuscaNota},
  FrXML_U in 'FrXML_U.pas' {FrXML},
  FrPw_U in 'FrPw_U.pas' {FrPw},
  FrConsManif_U in 'FrConsManif_U.pas' {FrConsManif},
  FrImportXML_U in 'FrImportXML_U.pas' {FrImportXML},
  FrSenMst_U in 'FrSenMst_U.pas' {FrSenMst},
  FrMens_U in 'FrMens_U.pas' {FrMens},
  FrConWeb_U in 'FrConWeb_U.pas' {FrConWeb},
  FrContab_U in 'FrContab_U.pas' {FrContab},
  FrEmail_U in 'FrEmail_U.pas' {FrEmail},
  DMFD_U in 'DMFD_U.pas' {DMFD: TDataModule},
  FrBuscaChave_U in 'FrBuscaChave_U.pas' {FrBuscaChave},
  FrBDFD_U in 'FrBDFD_U.pas' {FrBDFD};

type
  RecConf = Record
    NomeApp   : String;
    DirBuild  : String;
    DirApp    : String;
  end;

var
 Instancia: THandle;

{$R *.res}

function Is64Bits: Boolean;
const
  PROCESSOR_ARCHITECTURE_INTEL = $0000;
  PROCESSOR_ARCHITECTURE_IA64 = $0006;
  PROCESSOR_ARCHITECTURE_AMD64 = $0009;
  PROCESSOR_ARCHITECTURE_UNKNOWN = $FFFF;
var
  xSysInfo: TSystemInfo;
begin
  GetNativeSystemInfo(xSysInfo);
  case xSysInfo.wProcessorArchitecture of
    PROCESSOR_ARCHITECTURE_AMD64, PROCESSOR_ARCHITECTURE_IA64:
      Result := True;
  else
    Result := False;
  end;
end;

// Declaração de variáveis para terminar processos thread
var
 hHandle : THandle;
 iExit   : Integer;

begin

 //-----------------------------------------------------------------------------
 // COMO FUNCIONA O SISTEM DE ABERTURA DO GBNFE ATRAVÉS DO APLICATIVO ERP ------
 //-----------------------------------------------------------------------------
 //
 // C:\Sistemas\GBNFe\Exe\GBNFe.exe /developed_gb_informática_ltda /003 /usuário_padrão /0 /1 /0 /0 /0 /GERPA
 //
 // ParamStr(0) - Deve conter a unidade, caminho, nome e tipo do aplicativo
 // ParamStr(1) - Deve conter uma frase chave ex: /developed_gb_informática_ltda
 // ParamStr(2) - Deve conter o código da empresa ex: /XXX
 // ParamStr(3) - Deve conter o nome do usuário ex: /usuário_padrão
 // ParamStr(4) - Deve conter o nível de acesso pra liberar botões 0 = nível
 //               master, 1 = nível restrito MDe e 4 = Somente MDe, ex: /0
 // ParamStr(5) - DEve conter a permissão de multiplas instâncias
 //               sim = 0 ou não = 1, ex: /1
 // ParamStr(6) - Deve conter a permissão para geracao de NF Express:
 //               0=normal 1=express, ex: /0
 // ParamStr(7) - Deve conter o número da nota fiscal, no caso do envio express,
 //               atribui o número da nota na variável gNNF, ex: /0 ou /1452
 // ParamStr(8) - Deve conter a opção do envio express 0=nenhum 1=envio
 //               2=cancela 3=inutiliza 4=consulta, ex: /0
 // ParamStr(9) - Deve conter o Tipo de ERP, ex: /GERPA, /SISAG e /SISA
 //               Tamanho máximo de cinco caracteres
 //
 // Obs: É necessário a informação de todos os parâmetros
 //
 //-----------------------------------------------------------------------------

 // ----------------------------------------------------------------------------
 // by EL -> 19.10.2016 - Seta o componte de impressão que irá trabalhar
 //-----------------------------------------------------------------------------
 gCpt := 1;  // 1=FortesReport, 2 = FastReport

 // ----------------------------------------------------------------------------
 // by EL -> 19.10.2016 - Recebe parâmetro (Tipo de ERP)
 //-----------------------------------------------------------------------------
 if ParamStr(9) = '' then gERP := 'GERPA'
 else
  gERP := UpperCase(Copy(ParamStr(9), 2, Length(ParamStr(9))-1 ));

 // Seta caminho do executável
 gCamExe := ExtractFilePath(Application.ExeName);                               // Pega o caminho do executavel GBNFe independente de quem o chamou

 // ----------------------------------------------------------------------------
 // by EL -> 15.2.2012 - Recebe parâmetros (senha) do ERP
 // ----------------------------------------------------------------------------
 if ParamStr(1) <> '/developed_gb_informática_ltda' then
  begin

   Application.Messagebox(PWideChar('Esse aplicativo só poderá ser executado pelo ERP:' + gERP + '!'), PWideChar('' + gERP + ' - Erro de Execução!'), mb_iconstop+mb_ok);
   Halt;

  end
 else
  gEdtCodEmp := True;

 // by EL - Comentando o codigo da empresa
 if ParamStr(2) = '' then gCodEmp := '001'
 else
  gCodEmp := Copy(ParamStr(2), 2, Length(ParamStr(2))-1 );

 // Define o nome do usuário corrente - esse parâmetro deve ser modificado para o operador conforme TabUsu
 if ParamStr(3) = '' then gUsu := 'usuário_padrão'
 else
  gUsu := Copy(ParamStr(3), 2, Length(ParamStr(3))-1 );

 // Define o nível de acesso pra liberar botões 0 = nível master, 1 = nível restrito MDe e 4 = Somente MDe
 if ParamStr(4) = '' then gNivel := '0'
 else
  gNivel := Copy(ParamStr(4), 2, Length(ParamStr(4))-1 );

 // Define o multiplas instâncias sim = 0 ou não = 1
 if ParamStr(5) = '' then gInstancias := '1'
 else
  gInstancias := Copy(ParamStr(5), 2, Length(ParamStr(5))-1 );

 // Define a geracao de NF Express 0=normal 1=express
 if ParamStr(6) = '' then gExpress := '0'
 else
  gExpress := Copy(ParamStr(6), 2, Length(ParamStr(6))-1 );

 // Atribue o número da nota fiscal na variável gNNF
 if (gExpress <> '0') then
  begin
   if ParamStr(7) = '' then
    begin
     gExpress := '0';
     gNNF     := '0';
    end
   else
    gNNF := Copy(ParamStr(7), 2, Length(ParamStr(7))-1 );

   // Seta a opção do envio express 0=nenhum 1=envio 2=cancela 3=inutiliza 4=consulta
   if ParamStr(8) = '' then gOpcao := '0'
   else
    gOpcao := Copy(ParamStr(8), 2, Length(ParamStr(8))-1 );
  end;

 // ----------------------------------------------------------------------------
 // Evitar múltiplas instâncias do Programa
 // ----------------------------------------------------------------------------
 if gInstancias = '1' then
  begin

   Instancia:= CreateMutex(nil, false, '{1A11F0B9-AFF3-4DB4-9FDF-460108C63581}');
   if ( WaitForSingleObject(Instancia, 0) = wait_Timeout ) then
    begin

     Application.MessageBox('Atenção, há outro Emissor aberto ! Ele será fechado...' + chr(13) +
                            'Depois chame-o novamente !','GBNFe  - Atenção',MB_ICONINFORMATION);
     PostMessageW(FindWindow('tfrgbnfe', nil), WM_CLOSE,0,0);
     TerminateThread(hHandle, iExit);

     if ( FrPar.CheckBox10.Checked = True ) then
      begin

       winexec('taskkill /f /im GBNFe.exe', SW_HIDE);                           // Encerra o processo gbnfe definitivamente

       if ( Is64Bits ) then
        winexec('pskill64 -t GBNFE.Exe', SW_HIDE)                               // Encerra o processo gbnfe definitivamente
       else
        winexec('pskill   -t GBNFE.Exe', SW_HIDE);                              // Encerra o processo gbnfe definitivamente

      end;

     Exit;

    end;
  end;

 //----------------------------------------------------------------------------
 // Efetua a conecção com os bancos de dados
 // by Edson Lima ; 2017-6-30T1043
 //----------------------------------------------------------------------------
 if not ( FileExists(gCamExe + 'GBNFe.ini') ) then
  begin

   if ( FrBDFD = nil ) then
    FrBDFD := TFrBDFD.Create(Application);
   FrBDFD.BringToFront;
   FrBDFD.ShowModal;

  end;

 FrGBNFe.LerBDFD_E();

 if not ( gTemSqlEmp ) then
  begin

   if ( FrBDFD = nil ) then
    FrBDFD := TFrBDFD.Create(Application);
   FrBDFD.BringToFront;
   FrBDFD.ShowModal;

  end;

 if not ( FrGBNFe.fAcessar() ) then
  begin

   if ( FrBDFD = nil ) then
    FrBDFD := TFrBDFD.Create(Application);
   FrBDFD.BringToFront;
   FrBDFD.ShowModal;

  end;


  Application.Initialize;
  Application.HelpFile := 'C:\Sistemas de Desenvolvimento\GBNFe\Exe\Help\Manual Sistema GBNFe.chm';
  Application.CreateForm(TFrGBNFe, FrGBNFe);
  Application.CreateForm(TFrPar, FrPar);
  Application.CreateForm(TFrInut, FrInut);
  Application.CreateForm(TfrmStatus, frmStatus);
  Application.CreateForm(TFrSeleciona, FrSeleciona);
  Application.CreateForm(TFrCCe, FrCCe);
  Application.CreateForm(TFrBuscaNota, FrBuscaNota);
  Application.CreateForm(TFrXML, FrXML);
  Application.CreateForm(TFrPw, FrPw);
  Application.CreateForm(TFrConsManif, FrConsManif);
  Application.CreateForm(TFrImportXML, FrImportXML);
  Application.CreateForm(TFrSenMst, FrSenMst);
  Application.CreateForm(TFrMens, FrMens);
  Application.CreateForm(TFrConWeb, FrConWeb);
  Application.CreateForm(TFrContab, FrContab);
  Application.CreateForm(TFrEmail, FrEmail);
  Application.CreateForm(TDMFD, DMFD);
  Application.CreateForm(TFrBuscaChave, FrBuscaChave);
  Application.Title := 'NFe & NFCe';
  Application.Run;

end.

