unit TestGBNFe_U;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, dxSkinLiquidSky, dxSkinOffice2013LightGray, dxSkinOffice2016Dark,
  cxScrollBar, FireDAC.Phys.MSSQL, System.ImageList, dxSkinOffice2007Pink,
  cxInplaceContainer, cxCalendar, RLPreviewForm, dxSkinMetropolis, System.DateUtils,
  dxSkinWhiteprint, dxSkinBlack, dxCore, FireDAC.Phys.MSSQLDef, IdComponent,
  dxDateTimeWheelPicker, IdIOHandlerSocket, dxSkinVS2010, GBNFe_U, dxSkinSeven,
  Vcl.Menus, dxSkinLilian, ACBrECFVirtualBuffer, dxSkinSevenClassic, dxSkinSharpPlus,
  Winapi.WinInet, dxSkinOffice2010Black, ACBrECFVirtualPrinter, cxDrawTextUtils,
  ACBrDANFCeFortesFr, cxLookAndFeels, Vcl.ClipBrd, pcnConversao, IdSSLOpenSSL, IdFTP,
  IdIOHandler, ACBrNFeDANFeRLClass, ACBrECFVirtualNFCe, Data.DB, System.Variants,
  ACBrNFeDANFEClass, ACBrNFe, ACBrNFeDANFEFR, FireDAC.Phys.Intf, dxSkinOffice2007Blue,
  Vcl.ComCtrls, ACBrUtil, FireDAC.Phys.SQLPreprocessor, FireDAC.Phys.ODBCBase,
  cxDWMApi, dxSkinDarkRoom, Vcl.Dialogs, dxSkinOffice2007Black, dxSkinsCore, Vcl.Mask,
  FireDAC.Phys.MSSQLCli, dxSkinStardust, dxSkinsDefaultPainters, FireDAC.Phys.Meta,
  IdMessageClient, dxSkinSpringTime, ACBrSMS, dxSkinOffice2013White,
  FireDAC.Phys.SQLGenerator, dxSkinDarkSide, Vcl.Graphics, Vcl.ExtCtrls, ACBrMDFe,
  ACBrNFeDANFEFRDM, IdTCPClient, SHDocVw, Vcl.OleServer, ACBrNFeDANFeESCPOS,
  dxSkinDevExpressDarkStyle, Vcl.Controls, Vcl.ToolWin, IdSSL, Vcl.OleCtrls,
  dxSkinSilver, dxSkinOffice2007Green, FireDAC.Comp.Client, Vcl.DBGrids, cxFormats,
  IdMailBox, dxSkinBlueprint, dxSkinVisualStudio2013Dark, ACBrPosPrinter,
  dxSkinOffice2010Silver, dxSkinSummer2008, cxImageComboBox, cxGeometry, MidasLib,
  cxCustomData, dxSkinSharp, dxSkinCoffee, dxSkinOffice2010Blue, cxTL,
  IdExplicitTLSClientServerBase, cxContainer, IdMessage, IdText, Vcl.Buttons,
  Vcl.AppEvnts, Winapi.Messages, dxSkinTheAsphaltWorld, Winapi.ShellAPi, Vcl.Grids,
  dxActivityIndicator, pcnConversaoNFe, dxSkinVisualStudio2013Light, dxSkinFoggy,
  cxLookAndFeelPainters, FireDAC.Phys.MSSQLWrapper, dxSkinOffice2007Silver, ExcelXP,
  System.Classes, dxSkinMoneyTwins, IdBaseComponent, dxSkinLondonLiquidSky, IdSMTP,
  cxGraphics, FireDAC.Phys.ODBCCli, cxRichEdit, cxEdit, dxSkiniMaginary, cxCheckBox,
  cxClasses, dxSkinOffice2013DarkGray, dxSkinGlassOceans, cxLibraryConsts,
  Vcl.Printers, System.SysUtils, System.IniFiles, dxSkinValentine, ACBrECFVirtual,
  dxSkinHighContrast, cxStyles, IdHTTP, frxClass, cxTextEdit, ACBrMail, cxDateUtils,
  dxSkinXmas2008Blue, ACBrBase, cxMaskEdit, cxDropDownEdit, dxSkinOffice2016Colorful,
  Vcl.DBCtrls, dxSkinMcSkin, blcksock, ACBrDANFCeFortesFrA4, FireDAC.Phys.MSSQLMeta,
  dxSkinPumpkin, ACBrDFe, Winapi.Windows, TypInfo, dxSkinMetropolisDark,
  dxSkinVisualStudio2013Blue, Vcl.StdCtrls, cxControls, Vcl.ImgList, IdTCPConnection,
  Vcl.Forms, cxMemo, IdSMTPBase, ACBrSMSClass, cxLibraryStrs, IdAttachmentFile,
  cxCurrencyEdit, ACBrMDFeDAMDFeClass, dxSkinDevExpressStyle, cxTLdxBarBuiltInMenu,
  FireDAC.Phys.ODBCWrapper, dxGDIPlusAPI, IdIOHandlerStack, dxSkinBlue,
  ACBrMDFeDAMDFeRLClass, dxSkinCaramel;

type
  // Test methods for class TWebControl

  TestTWebControl = class(TTestCase)
  strict private
    FWebControl: TWebControl;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  // Test methods for class TFrGBNFe

  TestTFrGBNFe = class(TTestCase)
  strict private
    FFrGBNFe: TFrGBNFe;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure Testgeraenvianf;
    procedure Testgrava_xml_no_banco;
    procedure TestBitBtn10Click;
    procedure TestBitBtn14Click;
    procedure TestBitBtn13Click;
    procedure TestRadioGroup1Click;
    procedure TestFormCreate;
    procedure TestACBrNFe1GerarLog;
    procedure TestACBrNFe1StatusChange;
    procedure TestBitBtn1Click;
    procedure TestFormKeyDown;
    procedure TestTimer1Timer;
    procedure TestDestinatrio1Click;
    procedure TestFormShow;
    procedure TestBitBtn2Click;
    procedure TestBitBtn8Click;
    procedure TestExcluinota1Click;
    procedure TestBitBtn9Click;
    procedure TestBitBtn11Click;
    procedure TestMenuItem2Click;
    procedure TestConsultarnotaemFSDA1Click;
    procedure TestBitBtn4Click;
    procedure TestBitBtn5Click;
    procedure TestBitBtn7Click;
    procedure TestBitBtn6Click;
    procedure TestSelecionarTudo1Click;
    procedure TestMarcaDesmarcaTodos1Click;
    procedure TestMarcaDesmarcaTodos2Click;
    procedure TestDesmarcarTudo1Click;
    procedure TestDesmarcarTodas1Click;
    procedure TestDesmarcarTodas2Click;
    procedure TestFormClose;
    procedure TestBitBtn12Click;
    procedure TestSpeedButton1Click;
    procedure TestBitBtn3Click;
    procedure TestMovepPendentes1Click;
    procedure TestConsultaWeb5inuClick;
    procedure TesttrvwNFeExit;
    procedure TestBitBtn15Click;
    procedure TestSpeedButton2Click;
    procedure TestBitBtn16Click;
    procedure TestRadioGroup2Click;
    procedure TestConsultaWeb2Click;
    procedure TestConsultaWeb1Click;
    procedure TestCopiaNChaveClipBoard1Click;
    procedure TestMarcaDesmarcaTodos3Click;
    procedure TestDesmarcarTodas3Click;
    procedure TestMenuItem5Click;
    procedure TestMenuItem6Click;
    procedure TestdxSpinEdit1Exit;
    procedure Testbtn1MouseDown;
    procedure TestBitBtn2MouseDown;
    procedure Testbtn2Click;
    procedure TestBitBtn1MouseMove;
    procedure TestBitBtn2MouseMove;
    procedure TestBitBtn5MouseMove;
    procedure TestBitBtn6MouseMove;
    procedure TestBitBtn7MouseMove;
    procedure TestBitBtn8MouseMove;
    procedure TestBitBtn9MouseMove;
    procedure TestBitBtn11MouseMove;
    procedure TestBitBtn13MouseMove;
    procedure TestBitBtn4MouseMove;
    procedure TestBitBtn15MouseMove;
    procedure TestBitBtn3MouseMove;
    procedure TestBitBtn16MouseMove;
    procedure Testbtn3MouseMove;
    procedure TestBitBtn10MouseMove;
    procedure TestBitBtn14MouseMove;
    procedure TestBitBtn12MouseMove;
    procedure TestGroupBox2MouseMove;
    procedure TestGroupBox3MouseMove;
    procedure TestGroupBox9MouseMove;
    procedure TestGroupBox4MouseMove;
    procedure TestGroupBox1MouseMove;
    procedure TestGroupBox7MouseMove;
    procedure TestPanel7MouseMove;
    procedure TestdxTLCancMouseMove;
    procedure TestdxTLContMouseMove;
    procedure TestdxTLDenegMouseMove;
    procedure TestdxTLInutMouseMove;
    procedure TestdxTLTransMouseMove;
    procedure TestConsultaWeb5EnviaEmailParaDestinatrios1Click;
    procedure TestConsultaWeb5EnviaEmailParaDestinatrios6Click;
    procedure Testedt_CodEmpKeyPress;
    procedure Testedt_CodEmpExit;
    procedure Testedt_NumNNFKeyPress;
    procedure TestcxTLExit;
    procedure TestcxTLMouseMove;
    procedure TestSBHomolMouseMove;
    procedure TestSBProdMouseMove;
    procedure Testgrp1MouseMove;
    procedure TestEsconderRespostas1Click;
    procedure TestcxTLKeyDown;
    procedure TestFormResize;
    procedure TestcxTLCustomDrawDataCell;
    procedure TestcxTLInutCustomDrawDataCell;
    procedure Testrlprvwstp1AfterPrint;
    procedure TestStrZero;
    procedure TestfIniPen;
    procedure TestEncryptStr;
    procedure TestDecryptStr;
    procedure TestCrypt;
    procedure TestfUniMap;
    procedure TestfDesRed;
    procedure TestfGetTempDir;
    procedure TestGetBuildInfo;
    procedure TestOnlyNumbers;
    procedure TestfConsiste;
    procedure TestfGravaCCe;
    procedure TestfCancelaCCe;
    procedure TestTamArq;
    procedure TestAnoBi;
    procedure TestfLerGer;
    procedure TestfGraGer;
    procedure TestfVerPAG;
    procedure TestfCanCAP;
    procedure TestfVerBDG;
    procedure TestfVrfInuNot;
    procedure TestfMensOnShow;
    procedure TestfTemSel;
    procedure TestfMudaVersao;
    procedure TestfFusHor;
    procedure TestpImpr;
    procedure TestMarcaBloco;
    procedure TestpAtribSel;
    procedure TestpAtuTL;
    procedure TestGravarConfiguracao;
    procedure TestLerConf1;
    procedure TestLerConf2;
    procedure TestLoadXML;
    procedure TestLoadXML1;
    procedure TestLoadXML2;
    procedure TestpAtuNFe;
    procedure TestpAtuNFeT;
    procedure TestpLerEmp;
    procedure TestpVerPas;
    procedure TestpAtrCam;
    procedure TestTransmiteCCe;
    procedure TestConsultaCCe;
    procedure TestEnviaEmailCCe;
    procedure TestpGravaNFe;
    procedure TestpEnviaEmailCan;
    procedure TestVerifCert;
    procedure TestGravarIni;
    procedure TestLerIni;
    procedure TestGravarNSU;
    procedure TestLerNSU;
    procedure TestGravarEMI;
    procedure TestLerEMI;
    procedure TestGravarPesXML;
    procedure TestLerPesXML;
    procedure TestCopia_Xml_PathLog;
    procedure TestpDefineRel;
    procedure TestpDefineRelFR;
    procedure TestpEliminaXml;
    procedure TestpCopiaNChave;
    procedure TestpCopiaNChaveMDFe;
    procedure TestpPegaChaveCW;
    procedure TestpPegaChaveCWM;
    procedure TestpExcluiXmlErro;
    procedure TestGravarBDFD;
    procedure TestLerBDFD;
    procedure TestpSelNfe;
    procedure TestpMostraTipoAmb;
    procedure TestpSuporteSenha;
    procedure TestpGAV;
  end;

implementation

procedure TestTWebControl.SetUp;
begin
  FWebControl := TWebControl.Create;
end;

procedure TestTWebControl.TearDown;
begin
  FWebControl.Free;
  FWebControl := nil;
end;

procedure TestTFrGBNFe.SetUp;
begin
  FFrGBNFe := TFrGBNFe.Create;
end;

procedure TestTFrGBNFe.TearDown;
begin
  FFrGBNFe.Free;
  FFrGBNFe := nil;
end;

procedure TestTFrGBNFe.Testgeraenvianf;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.geraenvianf(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.Testgrava_xml_no_banco;
begin
  FFrGBNFe.grava_xml_no_banco;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn10Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn10Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn14Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn14Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn13Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn13Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestRadioGroup1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.RadioGroup1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestFormCreate;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.FormCreate(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestACBrNFe1GerarLog;
var
  Mensagem: string;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.ACBrNFe1GerarLog(Mensagem);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestACBrNFe1StatusChange;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.ACBrNFe1StatusChange(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestFormKeyDown;
var
  Shift: TShiftState;
  Key: Word;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.FormKeyDown(Sender, Key, Shift);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestTimer1Timer;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.Timer1Timer(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestDestinatrio1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.Destinatrio1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestFormShow;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.FormShow(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn2Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn2Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn8Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn8Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestExcluinota1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.Excluinota1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn9Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn9Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn11Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn11Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestMenuItem2Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.MenuItem2Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestConsultarnotaemFSDA1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.ConsultarnotaemFSDA1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn4Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn4Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn5Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn5Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn7Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn7Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn6Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn6Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestSelecionarTudo1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.SelecionarTudo1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestMarcaDesmarcaTodos1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.MarcaDesmarcaTodos1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestMarcaDesmarcaTodos2Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.MarcaDesmarcaTodos2Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestDesmarcarTudo1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.DesmarcarTudo1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestDesmarcarTodas1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.DesmarcarTodas1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestDesmarcarTodas2Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.DesmarcarTodas2Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestFormClose;
var
  Action: TCloseAction;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.FormClose(Sender, Action);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn12Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn12Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestSpeedButton1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.SpeedButton1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn3Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn3Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestMovepPendentes1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.MovepPendentes1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestConsultaWeb5inuClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.ConsultaWeb5inuClick(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TesttrvwNFeExit;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.trvwNFeExit(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn15Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn15Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestSpeedButton2Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.SpeedButton2Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn16Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn16Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestRadioGroup2Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.RadioGroup2Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestConsultaWeb2Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.ConsultaWeb2Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestConsultaWeb1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.ConsultaWeb1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestCopiaNChaveClipBoard1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.CopiaNChaveClipBoard1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestMarcaDesmarcaTodos3Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.MarcaDesmarcaTodos3Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestDesmarcarTodas3Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.DesmarcarTodas3Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestMenuItem5Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.MenuItem5Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestMenuItem6Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.MenuItem6Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestdxSpinEdit1Exit;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.dxSpinEdit1Exit(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.Testbtn1MouseDown;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Button: TMouseButton;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.btn1MouseDown(Sender, Button, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn2MouseDown;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Button: TMouseButton;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn2MouseDown(Sender, Button, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.Testbtn2Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.btn2Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn1MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn1MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn2MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn2MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn5MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn5MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn6MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn6MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn7MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn7MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn8MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn8MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn9MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn9MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn11MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn11MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn13MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn13MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn4MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn4MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn15MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn15MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn3MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn3MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn16MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn16MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.Testbtn3MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.btn3MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn10MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn10MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn14MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn14MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestBitBtn12MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.BitBtn12MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGroupBox2MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.GroupBox2MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGroupBox3MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.GroupBox3MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGroupBox9MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.GroupBox9MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGroupBox4MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.GroupBox4MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGroupBox1MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.GroupBox1MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGroupBox7MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.GroupBox7MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestPanel7MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.Panel7MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestdxTLCancMouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.dxTLCancMouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestdxTLContMouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.dxTLContMouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestdxTLDenegMouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.dxTLDenegMouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestdxTLInutMouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.dxTLInutMouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestdxTLTransMouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.dxTLTransMouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestConsultaWeb5EnviaEmailParaDestinatrios1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.ConsultaWeb5EnviaEmailParaDestinatrios1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestConsultaWeb5EnviaEmailParaDestinatrios6Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.ConsultaWeb5EnviaEmailParaDestinatrios6Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.Testedt_CodEmpKeyPress;
var
  Key: Char;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.edt_CodEmpKeyPress(Sender, Key);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.Testedt_CodEmpExit;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.edt_CodEmpExit(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.Testedt_NumNNFKeyPress;
var
  Key: Char;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.edt_NumNNFKeyPress(Sender, Key);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestcxTLExit;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.cxTLExit(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestcxTLMouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.cxTLMouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestSBHomolMouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.SBHomolMouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestSBProdMouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.SBProdMouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.Testgrp1MouseMove;
var
  Y: Integer;
  X: Integer;
  Shift: TShiftState;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.grp1MouseMove(Sender, Shift, X, Y);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestEsconderRespostas1Click;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.EsconderRespostas1Click(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestcxTLKeyDown;
var
  Shift: TShiftState;
  Key: Word;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.cxTLKeyDown(Sender, Key, Shift);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestFormResize;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.FormResize(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestcxTLCustomDrawDataCell;
var
  ADone: Boolean;
  AViewInfo: TcxTreeListEditCellViewInfo;
  ACanvas: TcxCanvas;
  Sender: TcxCustomTreeList;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.cxTLCustomDrawDataCell(Sender, ACanvas, AViewInfo, ADone);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestcxTLInutCustomDrawDataCell;
var
  ADone: Boolean;
  AViewInfo: TcxTreeListEditCellViewInfo;
  ACanvas: TcxCanvas;
  Sender: TcxCustomTreeList;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.cxTLInutCustomDrawDataCell(Sender, ACanvas, AViewInfo, ADone);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.Testrlprvwstp1AfterPrint;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.rlprvwstp1AfterPrint(Sender);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestStrZero;
var
  ReturnValue: string;
  iInteger: Integer;
  cString: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.StrZero(cString, iInteger);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfIniPen;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFrGBNFe.fIniPen;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestEncryptStr;
var
  ReturnValue: string;
  Key: Word;
  S: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.EncryptStr(S, Key);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestDecryptStr;
var
  ReturnValue: string;
  Key: Word;
  S: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.DecryptStr(S, Key);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestCrypt;
var
  ReturnValue: string;
  Src: string;
  Action: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.Crypt(Action, Src);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfUniMap;
var
  ReturnValue: Boolean;
  PSenha: PWideChar;
  PLetra: PWideChar;
  PServer: PWideChar;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fUniMap(PServer, PLetra, PSenha);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfDesRed;
var
  ReturnValue: string;
  Forcada: Boolean;
  Letra: PWideChar;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fDesRed(Letra, Forcada);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfGetTempDir;
var
  ReturnValue: string;
begin
  ReturnValue := FFrGBNFe.fGetTempDir;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGetBuildInfo;
var
  ReturnValue: string;
  Prog: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.GetBuildInfo(Prog);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestOnlyNumbers;
var
  ReturnValue: string;
  sRetorno: string;
  sTexto: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.OnlyNumbers(sTexto, sRetorno);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfConsiste;
var
  ReturnValue: Boolean;
  chv2: string;
  chv1: string;
  ser2: string;
  ser1: string;
  nnf2: string;
  nnf1: string;
  demi2: string;
  demi1: string;
  cdloj2: string;
  cdloj1: string;
  locErr: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fConsiste(locErr, cdloj1, cdloj2, demi1, demi2, nnf1,
      nnf2, ser1, ser2, chv1, chv2);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfGravaCCe;
var
  ReturnValue: Boolean;
  xMotivo: string;
  cStat: string;
  nNF: Variant;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fGravaCCe(nNF, cStat, xMotivo);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfCancelaCCe;
var
  ReturnValue: Boolean;
  dEmi: string;
  nNF: string;
  Codigo_loja: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fCancelaCCe(Codigo_loja, nNF, dEmi);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestTamArq;
var
  ReturnValue: Integer;
  Arquivo: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.TamArq(Arquivo);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestAnoBi;
var
  ReturnValue: Boolean;
  Ano: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.AnoBi(Ano);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfLerGer;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFrGBNFe.fLerGer;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfGraGer;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFrGBNFe.fGraGer;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfVerPAG;
var
  ReturnValue: Boolean;
  iCodPed: Integer;
  iCodEmp: Integer;
  iCodNot: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fVerPAG(iCodNot, iCodEmp, iCodPed);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfCanCAP;
var
  ReturnValue: Boolean;
  iCodMot: Integer;
  iCodPed: Integer;
  iCodEmp: Integer;
  iCodNot: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fCanCAP(iCodNot, iCodEmp, iCodPed, iCodMot);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfVerBDG;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFrGBNFe.fVerBDG;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfVrfInuNot;
var
  ReturnValue: Boolean;
  iSerNot: Integer;
  iModNot: Integer;
  iCodNot: Integer;
  iCodEmp: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fVrfInuNot(iCodEmp, iCodNot, iModNot, iSerNot);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfMensOnShow;
var
  ReturnValue: Integer;
  sVarMens: string;
  iTipMens: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fMensOnShow(iTipMens, sVarMens);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfTemSel;
var
  ReturnValue: Boolean;
  cxTLbSel: TcxTreeListColumn;
  cxTL: TcxTreeList;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fTemSel(cxTL, cxTLbSel);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfMudaVersao;
var
  ReturnValue: Boolean;
  md: Integer;
  op: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fMudaVersao(op, md);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestfFusHor;
var
  ReturnValue: TDateTime;
  dhEve: TDateTime;
  vdhEve: string;
  CdMun: string;
  CdUf: Integer;
  FusHor: Boolean;
  Hor_DF: Boolean;
  HorVer: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFrGBNFe.fFusHor(HorVer, Hor_DF, FusHor, CdUf, CdMun, vdhEve,
      dhEve);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpImpr;
begin
  FFrGBNFe.pImpr;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestMarcaBloco;
var
  blTodos: Boolean;
  blMarca: Boolean;
  cxTL: TcxTreeList;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.MarcaBloco(cxTL, blMarca, blTodos);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpAtribSel;
var
  FD: TFDQuery;
  cxTLsSer: TcxTreeListColumn;
  cxTLsMod: TcxTreeListColumn;
  cxTLINot: TcxTreeListColumn;
  cxTLdDem: TcxTreeListColumn;
  dxTL: TcxTreeList;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pAtribSel(dxTL, cxTLdDem, cxTLINot, cxTLsMod, cxTLsSer, FD);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpAtuTL;
var
  FD: TFDQuery;
  cxTLsCha: TcxTreeListColumn;
  cxTLsRec: TcxTreeListColumn;
  cxTLsPro: TcxTreeListColumn;
  cxTLsSit: TcxTreeListColumn;
  cxTLcVal: TcxTreeListColumn;
  cxTLlNot: TcxTreeListColumn;
  cxTLdDem: TcxTreeListColumn;
  cxTLsSer: TcxTreeListColumn;
  cxTLsMod: TcxTreeListColumn;
  cxTLsCod: TcxTreeListColumn;
  cxTLsCpf: TcxTreeListColumn;
  cxTLsDes: TcxTreeListColumn;
  cxTLbSel: TcxTreeListColumn;
  cxTL: TcxTreeList;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pAtuTL(cxTL, cxTLbSel, cxTLsDes, cxTLsCpf, cxTLsCod, cxTLsMod, cxTLsSer,
      cxTLdDem, cxTLlNot, cxTLcVal, cxTLsSit, cxTLsPro, cxTLsRec, cxTLsCha, FD);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGravarConfiguracao;
begin
  FFrGBNFe.GravarConfiguracao;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLerConf1;
begin
  FFrGBNFe.LerConf1;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLerConf2;
begin
  FFrGBNFe.LerConf2;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLoadXML;
var
  MyWebBrowser: TWebBrowser;
  MyMemo: TMemo;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.LoadXML(MyMemo, MyWebBrowser);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLoadXML1;
var
  MyWebBrowser: TWebBrowser;
  MyMemo: TMemo;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.LoadXML1(MyMemo, MyWebBrowser);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLoadXML2;
var
  MyWebBrowser: TWebBrowser;
  MyMemo: TMemo;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.LoadXML2(MyMemo, MyWebBrowser);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpAtuNFe;
begin
  FFrGBNFe.pAtuNFe;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpAtuNFeT;
begin
  FFrGBNFe.pAtuNFeT;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpLerEmp;
begin
  FFrGBNFe.pLerEmp;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpVerPas;
begin
  FFrGBNFe.pVerPas;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpAtrCam;
begin
  FFrGBNFe.pAtrCam;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestTransmiteCCe;
begin
  FFrGBNFe.TransmiteCCe;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestConsultaCCe;
begin
  FFrGBNFe.ConsultaCCe;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestEnviaEmailCCe;
begin
  FFrGBNFe.EnviaEmailCCe;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpGravaNFe;
var
  Consiste: Boolean;
  p12: Variant;
  p11: Variant;
  p10: Variant;
  p09: Variant;
  p08: Variant;
  p07: Variant;
  p06: Variant;
  p05: Variant;
  p04: Variant;
  p03: Variant;
  p02: Variant;
  p01: Variant;
  c12: string;
  c11: string;
  c10: string;
  c09: string;
  c08: string;
  c07: string;
  c06: string;
  c05: string;
  c04: string;
  c03: string;
  c02: string;
  c01: string;
  locErr: string;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pGravaNFe(locErr, c01, c02, c03, c04, c05, c06, c07, c08, c09, c10,
      c11, c12, p01, p02, p03, p04, p05, p06, p07, p08, p09, p10, p11, p12, Consiste);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpEnviaEmailCan;
begin
  FFrGBNFe.pEnviaEmailCan;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestVerifCert;
begin
  FFrGBNFe.VerifCert;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGravarIni;
begin
  FFrGBNFe.GravarIni;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLerIni;
begin
  FFrGBNFe.LerIni;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGravarNSU;
begin
  FFrGBNFe.GravarNSU;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLerNSU;
begin
  FFrGBNFe.LerNSU;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGravarEMI;
begin
  FFrGBNFe.GravarEMI;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLerEMI;
begin
  FFrGBNFe.LerEMI;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGravarPesXML;
begin
  FFrGBNFe.GravarPesXML;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLerPesXML;
begin
  FFrGBNFe.LerPesXML;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestCopia_Xml_PathLog;
var
  TpNot: string;
  Aux: string;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.Copia_Xml_PathLog(Aux, TpNot);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpDefineRel;
begin
  FFrGBNFe.pDefineRel;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpDefineRelFR;
begin
  FFrGBNFe.pDefineRelFR;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpEliminaXml;
var
  TpNot: string;
  Cha: string;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pEliminaXml(Cha, TpNot);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpCopiaNChave;
var
  FD: TFDQuery;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pCopiaNChave(FD);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpCopiaNChaveMDFe;
var
  FD: TFDQuery;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pCopiaNChaveMDFe(FD);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpPegaChaveCW;
var
  UFCW: string;
  FD: TFDQuery;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pPegaChaveCW(FD, UFCW);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpPegaChaveCWM;
var
  FD: TFDQuery;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pPegaChaveCWM(FD);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpExcluiXmlErro;
var
  N: string;
  S: string;
  M: string;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pExcluiXmlErro(M, S, N);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestGravarBDFD;
begin
  FFrGBNFe.GravarBDFD;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestLerBDFD;
begin
  FFrGBNFe.LerBDFD;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpSelNfe;
var
  CN5: string;
  CN4: string;
  CN3: TDateTime;
  CN2: Integer;
  CN1: Integer;
  FD: TFDQuery;
begin
  // TODO: Setup method call parameters
  FFrGBNFe.pSelNfe(FD, CN1, CN2, CN3, CN4, CN5);
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpMostraTipoAmb;
begin
  FFrGBNFe.pMostraTipoAmb;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpSuporteSenha;
begin
  FFrGBNFe.pSuporteSenha;
  // TODO: Validate method results
end;

procedure TestTFrGBNFe.TestpGAV;
begin
  FFrGBNFe.pGAV;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTWebControl.Suite);
  RegisterTest(TestTFrGBNFe.Suite);
end.

