program GBNFe;

uses
  System,
  Windows,
  Messages,
  Forms,
  SysUtils,
  DB,
  GBNFe_U in 'GBNFe_U.pas' {FrGBNFe},
  FrPar_U in 'FrPar_U.pas' {FrPar},
  FrInut_U in 'FrInut_U.pas' {FrInut},
  DMNFe_U in 'DMNFe_U.pas' {dmNFe: TDataModule},
  ufrmStatus in 'ufrmStatus.pas' {frmStatus},
  FrSeleciona_U in 'FrSeleciona_U.pas' {FrSeleciona},
  FrBackup_U in 'FrBackup_U.pas' {FrBackup},
  FrCCe_U in 'FrCCe_U.pas' {FrCCe},
  FrBuscaNota_U in 'FrBuscaNota_U.pas' {FrBuscaNota},
  FrXML_U in 'FrXML_U.pas' {FrXML},
  FrBuscaChave_U in 'FrBuscaChave_U.pas' {FrBuscaChave},
  FrPw_U in 'FrPw_U.pas' {FrPw},
  FrConsManif_U in 'FrConsManif_U.pas' {FrConsManif},
  FrImportXML_U in 'FrImportXML_U.pas' {FrImportXML},
  FrSenMst_U in 'FrSenMst_U.pas' {FrSenMst},
  FrMens_U in 'FrMens_U.pas' {FrMens},
  FrConWeb_U in 'FrConWeb_U.pas' {FrConWeb},
  FrContab_U in 'FrContab_U.pas' {FrContab},
  FrEmail_U in 'FrEmail_U.pas' {Form1};

type
  RecConf = Record
    NomeApp   : String;
    DirBuild  : String;
    DirApp    : String;
  end;

var
 Instancia: THandle;

{$R *.res}

begin

 // ----------------------------------------------------------------------------
 // by EL -> 19.10.2016 - Seta o componte de impressão que irá trabalhar
 //-----------------------------------------------------------------------------
 gCpt := 1;  // 1=FortesReport, 2 = FastReport

 // ----------------------------------------------------------------------------
 // by EL -> 15.2.2012 - Recebe parâmetros (senha) do Gerpa
 // ----------------------------------------------------------------------------
 if ParamStr(1) <> '/developed_gb_informática_ltda' then
  begin
   Application.Messagebox('Esse aplicativo só poderá ser executado pelo Gerpa', 'Gerpa - Erro de Execução!', mb_iconstop+mb_ok);
   Halt;
  end
 else
  gEdtCodEmp := True;

 // by EL - Comentando o codigo da empresa
 if ParamStr(2) = '' then gCodEmp := '001'
 else
  gCodEmp := Copy(ParamStr(2), 2, Length(ParamStr(2))-1 );

 // Define o nome do usuário corrente - esse parâmetro deve ser modificado para o operador conforme TabUsu
 if ParamStr(3) = '' then gUsu := 'usuário_padrão'
 else
  gUsu := Copy(ParamStr(3), 2, Length(ParamStr(3))-1 );

 // Define o nível de acesso pra liberar botões 0 = nível master, 1 = nível restrito MDe e 4 = Somente MDe
 if ParamStr(4) = '' then gNivel := '0'
  else
  gNivel := Copy(ParamStr(4), 2, Length(ParamStr(4))-1 );

 // Define o multiplas instâncias sim = 0 ou não = 1
 if ParamStr(5) = '' then gInstancias := '1'
 else
  gInstancias := Copy(ParamStr(5), 2, Length(ParamStr(5))-1 );

 // Define a geracao de NF Express 0=normal 1=express
  if ParamStr(6) = '' then gExpress := '0'
 else
  gExpress := Copy(ParamStr(6), 2, Length(ParamStr(6))-1 );

 // Atribue o número da nota fiscal na variável gNNF
 if (gExpress <> '0') then
  begin
   if ParamStr(7) = '' then
    begin
     gExpress := '0';
     gNNF     := '0';
    end
   else
    gNNF := Copy(ParamStr(7), 2, Length(ParamStr(7))-1 );

   // Seta a opção do envio express 0=nenhum 1=envio 2=cancela 3=inutiliza 4=consulta
   if ParamStr(8) = '' then gOpcao := '0'
   else
    gOpcao := Copy(ParamStr(8), 2, Length(ParamStr(8))-1 );
  end;

 // ----------------------------------------------------------------------------
 // Evitar múltiplas instâncias do Programa
 // ----------------------------------------------------------------------------
 if gInstancias = '1' then
  begin
   Instancia:= CreateMutex(nil, false, 'InstanciaGbNFe');
   if WaitForSingleObject(Instancia, 0) = wait_Timeout then
    begin
     Application.MessageBox('Atenção, há outro Emissor aberto ! Ele será fechado...' + chr(13) +
                            'Depois chame-o novamente !','GBNFe  - Atenção',MB_ICONINFORMATION);
     PostMessage(FindWindow('tfrgbnfe', nil), WM_CLOSE,0,0);
     Exit;
    end;
  end;

  Application.Initialize;
  Application.HelpFile := 'C:\SISTEMAS_de_DESENVOLV\GBNFe_ZEOS\Exe\Help\win32.hlp';
  Application.Title := 'GBNFe';
  Application.CreateForm(TdmNFe, dmNFe);
  Application.CreateForm(TFrGBNFe, FrGBNFe);
  Application.CreateForm(TFrPar, FrPar);
  Application.CreateForm(TFrInut, FrInut);
  Application.CreateForm(TfrmStatus, frmStatus);
  Application.CreateForm(TFrSeleciona, FrSeleciona);
  Application.CreateForm(TFrBackup, FrBackup);
  Application.CreateForm(TFrCCe, FrCCe);
  Application.CreateForm(TFrBuscaNota, FrBuscaNota);
  Application.CreateForm(TFrXML, FrXML);
  Application.CreateForm(TFrBuscaChave, FrBuscaChave);
  Application.CreateForm(TFrPw, FrPw);
  Application.CreateForm(TFrConsManif, FrConsManif);
  Application.CreateForm(TFrImportXML, FrImportXML);
  Application.CreateForm(TFrSenMst, FrSenMst);
  Application.CreateForm(TFrMens, FrMens);
  Application.CreateForm(TFrConWeb, FrConWeb);
  Application.CreateForm(TFrContab, FrContab);
  Application.CreateForm(TForm1, Form1);
  Application.Run;

end.

